# Travis caches can be manually removed if necessary. This is one of the very
# few manual operations that is possible with Travis, and it can be done by a
# Bitcoin Core GitHub member via the Travis web interface [0].
#
# Travis CI uploads the cache after the script phase of the build [1].
# However, the build is terminated without saving the cache if it takes over
# 50 minutes [2]. Thus, if we spent too much time in early build stages, fail
# with an error and save the cache.
#
# [0] https://travis-ci.org/bitcoin/bitcoin/caches
# [1] https://docs.travis-ci.com/user/caching/#build-phases
# [2] https://docs.travis-ci.com/user/customizing-the-build#build-timeouts

version: ~> 1.0

dist: bionic
os: linux
language: minimal
arch: amd64
cache:
  directories:
    - $TRAVIS_BUILD_DIR/depends/built
    - $TRAVIS_BUILD_DIR/depends/sdk-sources
    - $TRAVIS_BUILD_DIR/ci/scratch/.ccache
    - $TRAVIS_BUILD_DIR/releases/$HOST
stages:
  - lint
  - test
  - ci-fuzz
env:
  global:
    - CI_RETRY_EXE="travis_retry"
    - CACHE_ERR_MSG="Error! Initial build successful, but not enough time remains to run later build stages and tests. See https://docs.travis-ci.com/user/customizing-the-build#build-timeouts . Please manually re-run this job by using the travis restart button. The next run should not time out because the build cache has been saved."
before_install:
  - set -o errexit; source ./ci/test/00_setup_env.sh
  - set -o errexit; source ./ci/test/03_before_install.sh
install:
  - set -o errexit; source ./ci/test/04_install.sh
before_script:
  # Temporary workaround for https://github.com/bitcoin/bitcoin/issues/16368
  - for i in {1..4}; do echo "$(sleep 500)" ; done &
  - set -o errexit; source ./ci/test/05_before_script.sh &> "/dev/null"
script:
  - export CONTINUE=1
  - if [ $SECONDS -gt 1200 ]; then export CONTINUE=0; fi  # Likely the depends build took very long
  - if [ $TRAVIS_REPO_SLUG = "bitcoin/bitcoin" ]; then export CONTINUE=1; fi  # continue on repos with extended build time (90 minutes)
  - if [ $CONTINUE = "1" ]; then set -o errexit; source ./ci/test/06_script_a.sh; else set +o errexit; echo "$CACHE_ERR_MSG"; false; fi
  - if [[ $SECONDS -gt 50*60-$EXPECTED_TESTS_DURATION_IN_SECONDS ]]; then export CONTINUE=0; fi
  - if [ $TRAVIS_REPO_SLUG = "bitcoin/bitcoin" ]; then export CONTINUE=1; fi  # continue on repos with extended build time (90 minutes)
  - if [ $CONTINUE = "1" ]; then set -o errexit; source ./ci/test/06_script_b.sh; else set +o errexit; echo "$CACHE_ERR_MSG"; false; fi
after_script:
  - echo $TRAVIS_COMMIT_RANGE
jobs:
  include:

    - stage: lint
      name: 'lint'
      env:
      cache: pip
      language: python
      python: '3.6' # Oldest supported version according to doc/dependencies.md
      install:
        - set -o errexit; source ./ci/lint/04_install.sh
      before_script:
        - set -o errexit; source ./ci/lint/05_before_script.sh
      script:
        - set -o errexit; source ./ci/lint/06_script.sh
    - stage: ci-fuzz
      name: 'ci-fuzz'
      env:
        // Display name of the project.
        PROJECT = 'bitcoin-new-docker'
        // Display name of the campaign to be run.
        CAMPAIGN = 'asmap_ci'
        // Address of the fuzzing service
        FUZZING_SERVICE_URL = 'grpc-api.code-intelligence.com:443'
        // Address of the fuzzing web interface
        WEB_APP_URL = 'app.code-intelligence.com'

        // Credentials for accessing the fuzzing service
        CIFUZZ_CREDS = credentials('CIFUZZ_CREDS')
        CICTL = 'cictl-2.14.1-linux';
        CICTL_VERSION = '2.14.1';
        CICTL_SHA256SUM = 'd1f3644e94b78e2cbf1a4317e4a0ad57f9cc62bb68be898ced77ec3db6cc2a83';
        CICTL_URL = 'https://s3.eu-central-1.amazonaws.com/public.code-intelligence.com/cictl/cictl-2.14.1-linux';
        FINDINGS_TYPE = 'CRASH';
        TIMEOUT = '900'
        # Email that will receive reports if any finding is encountered.
        CI_FUZZING_REPORT_EMAIL_RECIPIENT: schrewe@code-intelligence.com
      cache:
      language:
      install:
        - sh '''
              set -eu

              # Download cictl if it doesn't exist already
              if [ ! -f "${CICTL}" ]; then
                wget "${CICTL_URL}" -O "${CICTL}"
              fi

              # Verify the checksum
              echo "${CICTL_SHA256SUM} "${CICTL}"" | sha256sum --check

              # Make it executable
              chmod +x "${CICTL}"
            '''
      before_script:
        - sh '''
              set -eu

              # Log in
              ./${CICTL} login -u "${CIFUZZ_CREDS_USR}" -p "${CIFUZZ_CREDS_PSW}"

              # Start Fuzzing
              LOG_FILE="start-$(basename "asmap_ci").logs"
              ./${CICTL} start_fuzzing                 --daemon_listen_address="${FUZZING_SERVICE_URL}"                 --project_name="${PROJECT}"                 --campaign_name="${CAMPAIGN}"                 --git_branch="${GIT_BRANCH#*/}"                 | tee "${LOG_FILE}"
            '''
      script:
        - sh '''
              set -eu

              # Get the name of the started campaign run from the logs
              LOG_FILE="start-$(basename "asmap_ci").logs"
              LINE=$(tail -1 "${LOG_FILE}")
              CAMPAIGN_RUN=${LINE#*"ID: "}

              # Monitor Fuzzing
              ./${CICTL} monitor_campaign_run \
                --daemon_listen_address="${FUZZING_SERVICE_URL}" \
                --dashboard_address="${WEB_APP_URL}" \
                --project_name="${PROJECT}" \
                --campaign_run_name="${CAMPAIGN_RUN}" \
                --duration="${TIMEOUT}" \
                --findings_type="${FINDINGS_TYPE}"
            '''